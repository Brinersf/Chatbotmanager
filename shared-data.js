// Dados compartilhados do sistema
const DataManager = {
    // Dados da cl√≠nica
    clinicData: {
        name: "Cl√≠nica Bella Est√©tica",
        phone: "(11) 99999-9999",
        email: "contato@bellaest√©tica.com.br",
        address: "Rua das Flores, 123 - Centro",
        city: "S√£o Paulo - SP",
        hours: "Segunda a Sexta: 8h √†s 18h | S√°bado: 8h √†s 14h"
    },

    // Procedimentos dispon√≠veis
    procedures: [
        {
            id: 1,
            name: "Limpeza de Pele",
            category: "Facial",
            price: "R$ 120,00",
            duration: "60 min",
            description: "Limpeza profunda com extra√ß√£o e hidrata√ß√£o",
            icon: "fas fa-spa"
        },
        {
            id: 2,
            name: "Botox",
            category: "Facial",
            price: "R$ 800,00",
            duration: "30 min",
            description: "Aplica√ß√£o de toxina botul√≠nica para rugas",
            icon: "fas fa-syringe"
        },
        {
            id: 3,
            name: "Preenchimento Labial",
            category: "Facial",
            price: "R$ 600,00",
            duration: "45 min",
            description: "Preenchimento com √°cido hialur√¥nico",
            icon: "fas fa-kiss"
        },
        {
            id: 4,
            name: "Massagem Relaxante",
            category: "Corporal",
            price: "R$ 150,00",
            duration: "90 min",
            description: "Massagem terap√™utica para relaxamento",
            icon: "fas fa-hands"
        },
        {
            id: 5,
            name: "Drenagem Linf√°tica",
            category: "Corporal",
            price: "R$ 180,00",
            duration: "60 min",
            description: "T√©cnica para redu√ß√£o de incha√ßo",
            icon: "fas fa-water"
        }
    ],

    // Agendamentos (simulado)
    appointments: [],

    // M√©todos
    getProcedureById: function(id) {
        return this.procedures.find(proc => proc.id === id);
    },

    addAppointment: function(appointment) {
        appointment.id = Date.now();
        this.appointments.push(appointment);
        return appointment;
    }
};

üìÑ 
js/client.js

// Sistema de chat e funcionalidades do cliente
let selectedProcedure = null;

// Inicializar chat
function initializeChat() {
    displayWelcomeMessage();
    loadProceduresDropdown();
    setupEventListeners();
}

function displayWelcomeMessage() {
    const chatMessages = document.getElementById('chatMessages');
    const welcomeMessage = createBotMessage(`
        Ol√°! üëã Bem-vindo √† ${DataManager.clinicData.name}!
        
        Sou seu assistente virtual e estou aqui para ajudar voc√™ com:
        ‚Ä¢ üìÖ Agendamentos de procedimentos
        ‚Ä¢ üíÑ Informa√ß√µes sobre nossos servi√ßos
        ‚Ä¢ üìç Localiza√ß√£o e hor√°rios
        ‚Ä¢ üìû Contato direto
        
        Como posso te ajudar hoje?
    `);
    chatMessages.appendChild(welcomeMessage);
}

function createBotMessage(text) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'flex items-start space-x-3';
    messageDiv.innerHTML = `
        <div class="bg-purple-600 p-2 rounded-full">
            <i class="fas fa-robot text-white text-sm"></i>
        </div>
        <div class="bg-white rounded-2xl rounded-tl-none p-4 max-w-md shadow-sm">
            <p class="text-gray-800 whitespace-pre-line">${text}</p>
            <span class="text-xs text-gray-500 mt-2 block">${new Date().toLocaleTimeString()}</span>
        </div>
    `;
    return messageDiv;
}

function createUserMessage(text) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'flex items-start space-x-3 justify-end';
    messageDiv.innerHTML = `
        <div class="bg-blue-600 rounded-2xl rounded-tr-none p-4 max-w-md shadow-sm">
            <p class="text-white">${text}</p>
            <span class="text-xs text-blue-200 mt-2 block">${new Date().toLocaleTimeString()}</span>
        </div>
        <div class="bg-blue-600 p-2 rounded-full">
            <i class="fas fa-user text-white text-sm"></i>
        </div>
    `;
    return messageDiv;
}

function sendMessage() {
    const input = document.getElementById('chatInput');
    const message = input.value.trim();
    
    if (!message) return;
    
    // Adicionar mensagem do usu√°rio
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.appendChild(createUserMessage(message));
    
    // Limpar input
    input.value = '';
    
    // Simular resposta do bot
    setTimeout(() => {
        const response = generateBotResponse(message);
        chatMessages.appendChild(createBotMessage(response));
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 1000);
    
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function sendQuickMessage(message) {
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.appendChild(createUserMessage(message));
    
    setTimeout(() => {
        const response = generateBotResponse(message);
        chatMessages.appendChild(createBotMessage(response));
        chatMessages.scrollTop = chatMessages.scrollHeight;
    }, 1000);
    
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function generateBotResponse(message) {
    const lowerMessage = message.toLowerCase();
    
    if (lowerMessage.includes('agendar') || lowerMessage.includes('agendamento')) {
        return `Perfeito! Vou te ajudar a agendar um procedimento. üìÖ
        
Voc√™ pode:
‚Ä¢ Clicar no bot√£o "Agendar" abaixo
‚Ä¢ Escolher um procedimento no menu "Ver procedimentos"
‚Ä¢ Me dizer qual procedimento te interessa

Qual procedimento voc√™ gostaria de agendar?`;
    }
    
    if (lowerMessage.includes('procedimento') || lowerMessage.includes('servi√ßo')) {
        return `Temos diversos procedimentos dispon√≠veis! üíÑ‚ú®

üî∏ **Faciais:**
‚Ä¢ Limpeza de Pele - R$ 120,00
‚Ä¢ Botox - R$ 800,00  
‚Ä¢ Preenchimento Labial - R$ 600,00

üî∏ **Corporais:**
‚Ä¢ Massagem Relaxante - R$ 150,00
‚Ä¢ Drenagem Linf√°tica - R$ 180,00

Clique em "Ver procedimentos" no menu para mais detalhes!`;
    }
    
    if (lowerMessage.includes('localiza√ß√£o') || lowerMessage.includes('endere√ßo')) {
        return `üìç **Nossa localiza√ß√£o:**
${DataManager.clinicData.address}
${DataManager.clinicData.city}

Estamos em uma localiza√ß√£o de f√°cil acesso, com estacionamento dispon√≠vel!`;
    }
    
    if (lowerMessage.includes('hor√°rio') || lowerMessage.includes('funcionamento')) {
        return `üïê **Hor√°rios de funcionamento:**
${DataManager.clinicData.hours}

Trabalhamos com agendamento para garantir o melhor atendimento!`;
    }
    
    if (lowerMessage.includes('contato') || lowerMessage.includes('telefone')) {
        return `üìû **Entre em contato conosco:**

‚Ä¢ **Telefone:** ${DataManager.clinicData.phone}
‚Ä¢ **Email:** ${DataManager.clinicData.email}
‚Ä¢ **WhatsApp:** Dispon√≠vel no mesmo n√∫mero

Respondemos rapidamente! üòä`;
    }
    
    return `Entendi! üòä Posso te ajudar com:

‚Ä¢ üìÖ **Agendamentos** - Marcar seu procedimento
‚Ä¢ üíÑ **Procedimentos** - Conhecer nossos servi√ßos  
‚Ä¢ üìç **Localiza√ß√£o** - Como chegar at√© n√≥s
‚Ä¢ üïê **Hor√°rios** - Quando funcionamos
‚Ä¢ üìû **Contato** - Falar diretamente conosco

O que voc√™ gostaria de saber?`;
}

// Event Listeners
function setupEventListeners() {
    document.getElementById('chatInput').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
}

// Dropdown de procedimentos
function loadProceduresDropdown() {
    const proceduresList = document.getElementById('proceduresList');
    
    DataManager.procedures.forEach(procedure => {
        const procedureDiv = document.createElement('div');
        procedureDiv.className = 'p-4 hover:bg-gray-50 cursor-pointer border-b border-gray-100 last:border-b-0';
        procedureDiv.onclick = () => selectProcedure(procedure);
        
        procedureDiv.innerHTML = `
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <i class="${procedure.icon} text-purple-600 mr-3"></i>
                    <div>
                        <h4 class="font-semibold text-gray-800">${procedure.name}</h4>
                        <p class="text-sm text-gray-600">${procedure.description}</p>
                        <div class="flex items-center mt-1 text-xs text-gray-500">
                            <i class="fas fa-clock mr-1"></i>${procedure.duration}
                        </div>
                    </div>
                </div>
                <div class="text-right">
                    <div class="font-bold text-purple-600">${procedure.price}</div>
                    <div class="text-xs text-gray-500">${procedure.category}</div>
                </div>
            </div>
        `;
        
        proceduresList.appendChild(procedureDiv);
    });
}

function toggleProceduresDropdown() {
    const dropdown = document.getElementById('proceduresDropdown');
    const icon = document.getElementById('dropdownIcon');
    
    if (dropdown.classList.contains('hidden')) {
        dropdown.classList.remove('hidden');
        icon.classList.remove('fa-chevron-down');
        icon.classList.add('fa-chevron-up');
    } else {
        dropdown.classList.add('hidden');
        icon.classList.remove('fa-chevron-up');
        icon.classList.add('fa-chevron-down');
    }
}

function selectProcedure(procedure) {
    selectedProcedure = procedure;
    toggleProceduresDropdown();
    openSchedulingModal();
}

// Modais
function openSchedulingModal() {
    const modal = document.getElementById('schedulingModal');
    const procedureInfo = document.getElementById('selectedProcedureInfo');
    
    if (selectedProcedure) {
        procedureInfo.innerHTML = `
            <div class="flex items-center">
                <i class="${selectedProcedure.icon} text-purple-600 text-2xl mr-4"></i>
                <div>
                    <h4 class="font-bold text-lg">${selectedProcedure.name}</h4>
                    <p class="text-gray-600">${selectedProcedure.description}</p>
                    <div class="flex items-center mt-2 text-sm text-gray-500">
                        <span class="mr-4"><i class="fas fa-clock mr-1"></i>${selectedProcedure.duration}</span>
                        <span class="font-semibold text-purple-600">${selectedProcedure.price}</span>
                    </div>
                </div>
            </div>
        `;
    } else {
        procedureInfo.innerHTML = `
            <div class="text-center text-gray-600">
                <i class="fas fa-calendar-plus text-3xl mb-2"></i>
                <p>Selecione um procedimento ou preencha os dados abaixo</p>
            </div>
        `;
    }
    
    modal.classList.remove('hidden');
    
    // Definir data m√≠nima como hoje
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('appointmentDate').min = today;
}

function closeSchedulingModal() {
    document.getElementById('schedulingModal').classList.add('hidden');
    clearSchedulingForm();
}

function clearSchedulingForm() {
    document.getElementById('clientName').value = '';
    document.getElementById('clientPhone').value = '';
    document.getElementById('appointmentDate').value = '';
    document.getElementById('appointmentTime').value = '';
    document.getElementById('appointmentNotes').value = '';
}

function confirmScheduling() {
    const name = document.getElementById('clientName').value;
    const phone = document.getElementById('clientPhone').value;
    const date = document.getElementById('appointmentDate').value;
    const time = document.getElementById('appointmentTime').value;
    const notes = document.getElementById('appointmentNotes').value;
    
    if (!name || !phone || !date || !time) {
        alert('Por favor, preencha todos os campos obrigat√≥rios!');
        return;
    }
    
    const appointment = {
        procedure: selectedProcedure,
        client: { name, phone },
        date,
        time,
        notes,
        createdAt: new Date()
    };
    
    DataManager.addAppointment(appointment);
    
    closeSchedulingModal();
    showSuccessModal(appointment);
}

function showSuccessModal(appointment) {
    const modal = document.getElementById('successModal');
    const message = document.getElementById('successMessage');
    
    const dateFormatted = new Date(appointment.date).toLocaleDateString('pt-BR');
    const procedureName = appointment.procedure ? appointment.procedure.name : 'Consulta';
    
    message.innerHTML = `
        <h3 class="text-xl font-bold text-green-600 mb-4">Agendamento Confirmado!</h3>
        <div class="text-left space-y-2">
            <p><strong>Procedimento:</strong> ${procedureName}</p>
            <p><strong>Cliente:</strong> ${appointment.client.name}</p>
            <p><strong>Data:</strong> ${dateFormatted}</p>
            <p><strong>Hor√°rio:</strong> ${appointment.time}</p>
            <p><strong>Telefone:</strong> ${appointment.client.phone}</p>
        </div>
        <div class="mt-4 p-3 bg-blue-50 rounded-xl text-sm text-blue-800">
            <i class="fas fa-info-circle mr-2"></i>
            Voc√™ receber√° uma confirma√ß√£o em breve!
        </div>
    `;
    
    modal.classList.remove('hidden');
    
    // Salvar dados para compartilhamento
    window.lastAppointment = appointment;
}

function closeSuccessModal() {
    document.getElementById('successModal').classList.add('hidden');
    document.getElementById('sharingModal').classList.remove('hidden');
}

// Fun√ß√µes de compartilhamento
function shareToClientWhatsApp() {
    const appointment = window.lastAppointment;
    if (!appointment) return;
    
    const procedureName = appointment.procedure ? appointment.procedure.name : 'Consulta';
    const dateFormatted = new Date(appointment.date).toLocaleDateString('pt-BR');
    
    const message = `üéâ *Agendamento Confirmado!*

üìÖ *Procedimento:* ${procedureName}
üë§ *Cliente:* ${appointment.client.name}
üìÜ *Data:* ${dateFormatted}
üïê *Hor√°rio:* ${appointment.time}
üì± *Telefone:* ${appointment.client.phone}

üìç *Local:* ${DataManager.clinicData.address}

‚ú® Obrigado por escolher a ${DataManager.clinicData.name}!`;
    
    const whatsappUrl = `https://wa.me/${appointment.client.phone.replace(/\D/g, '')}?text=${encodeURIComponent(message)}`;
    window.open(whatsappUrl, '_blank');
}

function copyAppointmentData() {
    const appointment = window.lastAppointment;
    if (!appointment) return;
    
    const procedureName = appointment.procedure ? appointment.procedure.name : 'Consulta';
    const dateFormatted = new Date(appointment.date).toLocaleDateString('pt-BR');
    
    const text = `Agendamento Confirmado!
    
Procedimento: ${procedureName}
Cliente: ${appointment.client.name}
Data: ${dateFormatted}
Hor√°rio: ${appointment.time}
Telefone: ${appointment.client.phone}
Local: ${DataManager.clinicData.address}

${DataManager.clinicData.name}`;
    
    navigator.clipboard.writeText(text).then(() => {
        alert('‚úÖ Dados copiados para a √°rea de transfer√™ncia!');
    });
}

function downloadAppointmentPDF() {
    alert('üìÑ Funcionalidade de PDF ser√° implementada em breve!');
}

function shareToSocialMedia() {
    alert('üì± Funcionalidade de redes sociais ser√° implementada em breve!');
}

function closeSharingModal() {
    document.getElementById('sharingModal').classList.add('hidden');
    selectedProcedure = null;
}

// Inicializar quando a p√°gina carregar
document.addEventListener('DOMContentLoaded', function() {
    // Aguardar o sistema ser desbloqueado
    const checkUnlock = setInterval(() => {
        if (!document.getElementById('mainContent').classList.contains('hidden')) {
            initializeChat();
            clearInterval(checkUnlock);
        }
    }, 100);
});
